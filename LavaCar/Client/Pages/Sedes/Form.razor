@page "/sede-form"
@page "/sede-form/{Id:int}"
@using LavaCar.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject IJSRuntime js
@inject DialogService dialogService
@inject ServicioSingleton singleton
@using System.IO
@using BlazorInputFile
@inject HttpClient http

<div class="row">
    <div class="col-md-12">
        <RadzenTemplateForm TItem="Sede" Data=@model Submit="@Save">
            <RadzenFieldset Text="Sede">
                <div class="row">
                    <div class="col-md-2">
                        <RadzenLabel Text="Nombre" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="256" style="width: 100%" @bind-Value="@(model.Nombre)" Name="Nombre">
                        </RadzenTextBox><br />
                        <RadzenRequiredValidator Component="Nombre" Text="Campo Requerido" Style="position: absolute" />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        <RadzenLabel Text="Dirección" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="256" style="width: 100%" @bind-Value="@(model.Direccion)" Name="Direccion">
                        </RadzenTextBox><br />
                        <RadzenRequiredValidator Component="Direccion" Text="Campo Requerido" Style="position: absolute" />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        <RadzenLabel Text="Teléfono" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="256" style="width: 100%" @bind-Value="@(model.Telefono)" Name="Telefono">
                        </RadzenTextBox><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        <RadzenLabel Text="Email" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%" Name="Email" @bind-Value=@model.Email />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        <RadzenLabel Text="Celular" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="256" style="width: 100%" @bind-Value="@(model.Celular)" Name="Celular">
                        </RadzenTextBox><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        <RadzenLabel Text="Estado" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="model.Estado" Multiple="false" Placeholder="Select..." Data="@lstEstados" TextProperty="Descripcion" ValueProperty="Codigo"
                                        Style="margin-bottom: 20px; width:50%;" />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                    </div>
                    <div class="col-md-5">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Guardar" ButtonStyle="ButtonStyle.Success">
                        </RadzenButton>
                    </div>
                    <div class="col-md-4">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="@Cancelar">
                        </RadzenButton>
                    </div>
                </div>
            </RadzenFieldset>
        </RadzenTemplateForm>
    </div>
</div>
<br />

<br />
@code {

    [Parameter] public int Id { get; set; }


    string titulo = "";
    public Sede model = new Sede();
    Response response = new Response();
    public List<EstadoAuxiliar> lstEstados = new List<EstadoAuxiliar>();
    bool popup;


    protected override async Task OnInitializedAsync()
    {
        getEstados();
        await LoadData();
    }


    protected async Task Save()
    {
        model.EmpresaId = singleton.EmpresaId;
        model.Nombre = model.Nombre.ToUpper();
        model.Direccion = model.Direccion.ToUpper();


        if (model.Telefono.Length != 7)
        {
            await js.InvokeAsync<string>("MensajeAlerta", "El télefono debe tener 7 digitos.");
            return;
        }

        if (model.Celular.Length > 0)
        {
            if (model.Celular.Length != 10)
            {
                await js.InvokeAsync<string>("MensajeAlerta", "El celular debe tener 11 digitos.");
                return;
            }
        }

        if (!model.Email.Contains("@"))
        {
            await js.InvokeAsync<string>("MensajeAlerta", "Email invalido.");
            return;
        }



        if (Id != 0)
        {

            var result = await Http.PutAsJsonAsync<Sede>($"sedes", model);
            response = result.Content.ReadFromJsonAsync<Response>().Result;
        }
        else
        {

            var result = await Http.PostAsJsonAsync<Sede>($"sedes", model);
            response = result.Content.ReadFromJsonAsync<Response>().Result;
        }

        if (response.IsSuccessful)
        {
            response = await Http.GetFromJsonAsync<Response>($"sedes/GetSedesxEmpresa/{singleton.EmpresaId}");
            dialogService.Close(response);
        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", response.Message);
        }
    }

    public void Cancelar()
    {
        dialogService.Close(response);
    }


    protected async Task LoadData()
    {
        if (Id > 0)
        {
            titulo = "EDITAR SEDE";
            response = await Http.GetFromJsonAsync<Response>($"sedes/{Id}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<Sede>(response.Data.ToString());
            }
        }
        else
        {
            titulo = "NUEVA SEDE";
        }
    }

    public List<EstadoAuxiliar> getEstados()
    {
        lstEstados = new List<EstadoAuxiliar>
      {
      new EstadoAuxiliar {  Codigo = "A", Descripcion= "ACTIVO" },
      new EstadoAuxiliar { Codigo = "I", Descripcion = "INACTIVO" }
      };

        return lstEstados;
    }

}
