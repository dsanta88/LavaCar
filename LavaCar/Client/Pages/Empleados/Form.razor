@page "/empleado"
@page "/empleado-form/{Id:int}"
@using LavaCar.Shared
@using Newtonsoft.Json;
@using System.IO
@using BlazorInputFile
@using Helpers
@inject HttpClient http
@inject IJSRuntime js
@inject DialogService dialogService
@inject ServicioSingleton singleton
@inject HttpClient Http
@inject NavigationManager navigationManager


<div class="row">
    <div class="col-md-12">
        <RadzenTemplateForm TItem="Usuario" Data=@model Submit="@Save">
            <RadzenFieldset Text="Empleado">
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Nombre" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="256" style="width: 100%" @bind-Value="@(model.NombreCompleto)" Name="Nombre">
                        </RadzenTextBox><br />
                        <RadzenRequiredValidator Component="Nombre" Text="Campo Requerido" Style="position: absolute" />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Identificación" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="20" style="width: 100%" @bind-Value="@(model.Identificacion)" Name="Identificacion">
                        </RadzenTextBox><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Dirección" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="256" style="width: 100%" @bind-Value="@(model.Direccion)" Name="Direccion">
                        </RadzenTextBox><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Email" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="256" style="width: 100%" @bind-Value="@(model.Email)">
                        </RadzenTextBox><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Teléfono" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="7" style="width: 100%" @bind-Value="@(model.Telefono)">
                        </RadzenTextBox><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Celular" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox MaxLength="10" style="width: 100%" @bind-Value="@(model.Celular)" Name="Celular">
                        </RadzenTextBox><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Observación" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextArea MaxLength="2000" style="width: 100%" @bind-Value="@(model.Observacion)">
                        </RadzenTextArea><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Sexo" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="true" AllowFiltering="true" Name="Genero" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="model.Sexo" Multiple="false" Placeholder="Select..." Data="@lstGeneros" TextProperty="Nombre" ValueProperty="Codigo"
                                        Style="margin-bottom: 20px; width:100%;" /><br />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Estado" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="true" AllowFiltering="true" Name="Estado" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="model.Estado" Multiple="false" Placeholder="Select..." Data="@lstEstados" TextProperty="Descripcion" ValueProperty="Codigo"
                                        Style="margin-bottom: 20px; width:100%;" /><br />
                        <RadzenRequiredValidator Component="Estado" Text="Campo Requerido" Style="position: absolute" />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Perfil" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="true" AllowFiltering="true" Name="Perfil" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="model.PerfilCodigo" Multiple="false" Placeholder="Select..." Data="@lstPerfiles" TextProperty="Descripcion" ValueProperty="Codigo"
                                        Style="margin-bottom: 20px; width:100%;" /><br />
                        <RadzenRequiredValidator Component="Perfil" Text="Campo Requerido" Style="position: absolute" />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text="Foto" />
                    </div>
                    <div class="col-md-4">
                        <InputFile OnChange="HandleSelection"></InputFile>


                    </div>
                </div>
                @if (imagePath != null)
                {

                    <div class="row">
                        <div class="col-md-3"> </div>

                        <div class="col-md-6">
                            <img style="width:200px" src="@imagePath" />
                        </div>
                    </div>

                }
                <hr />
                <div class="row">
                    <div class="col-md-3"></div>
                    <div class="col-md-4">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Guardar" ButtonStyle="ButtonStyle.Success">
                        </RadzenButton>
                    </div>
                    <div class="col-md-4">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="@Cancelar">
                        </RadzenButton>
                    </div>
                </div>
            </RadzenFieldset>
        </RadzenTemplateForm>
    </div>
</div>
<br />
@code {

     [Parameter]
     public int Id { get; set; }
     string titulo = "";
    public Usuario model = new Usuario();
    Response response = new Response();
    string imagePath = null;
    public List<EstadoAuxiliar> lstEstados = new List<EstadoAuxiliar>();
    public List<Perfil> lstPerfiles = new List<Perfil>();
    public List<Genero> lstGeneros = new List<Genero>();
    public Generico generico = new Generico();
    string mensaje = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task Save()
    {

        model.NombreCompleto = model.NombreCompleto.ToUpper();
        model.FechaRegistro = DateTime.Now;

        try
        {

            if (model.Celular != null)
            {
                if (model.Celular.Length > 0)
                {
                    if (model.Celular.Length != 10)
                    {
                        await js.InvokeAsync<string>("MensajeAlerta", "El celular debe tener 10 digitos.");
                        return;
                    }
                }
            }

            if (model.Email != null)
            {
                if (!model.Email.Contains("@"))
                {
                    await js.InvokeAsync<string>("MensajeAlerta", "Email invalido.");
                    return;
                }
                else
                {
                    if (model.Clave == null)
                    {
                        model.Clave = "123456";
                    }
                }
            }

            if (model.PerfilCodigo <= 0)
            {
                await js.InvokeAsync<string>("MensajeAlerta", "Debe seleccionar el perfil.");
                return;

            }

            if (imagePath != null)
            {
                model.FotoUrl = imagePath;
            }

            if (Id != 0)
            {
                mensaje = $"El usuario {singleton.Nombre} modificó la información del usuario.";
                var result = await Http.PutAsJsonAsync<Usuario>($"Usuarios", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;
            }
            else
            {
                model.EmpresaId = singleton.EmpresaId;
                model.SedeId = singleton.SedeId;
                mensaje = $"El usuario {singleton.Nombre} ingreso la información del usuario.";
                var result = await Http.PostAsJsonAsync<Usuario>($"Usuarios", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;
            }


            if (response.IsSuccessful)
            {
                await GuardarLog("A", mensaje, null);
                response = await Http.GetFromJsonAsync<Response>($"Usuarios/GetUsuarioXSede/{singleton.SedeId}/{1}");
                dialogService.Close(response);
            }
            else
            {
                await js.InvokeAsync<string>("MensajeAlerta", response.Message);
            }
        }
        catch (Exception ex)
        {
            await GuardarLog("E", null, ex);
            await js.InvokeAsync<string>("MensajeAlerta", ex.Message);
            return;
        }

    }

    protected async Task Cancelar()
    {
        dialogService.Close();
    }


    protected async Task LoadData()
    {
        try
        {
            lstEstados = generico.getEstados();
            lstGeneros = generico.getGeneros();
            lstPerfiles = generico.getPerfiles();

            if (Id > 0)
            {
                titulo = "EDITAR EMPLEADO";
                response = await Http.GetFromJsonAsync<Response>($"Usuarios/{Id}");
                if (response.IsSuccessful)
                {
                    model = JsonConvert.DeserializeObject<Usuario>(response.Data.ToString());
                    if (model.FotoUrl != null)
                    {
                        imagePath = model.FotoUrl;
                    }
                }
            }
            else
            {
                titulo = "NUEVO EMPLEADO";
            }
        }
        catch (Exception ex)
        {
            await GuardarLog("E", null, ex);
            await js.InvokeAsync<string>("MensajeAlerta", ex.Message);
            return;
        }
    }




    async Task HandleSelection(IFileListEntry[] files)
    {
        try
        {
            string rutaBase = "/Upload/Fotos";
            imagePath = null;
            var file = files.FirstOrDefault();
            if (file != null)
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                string extension = Path.GetExtension(file.Name);


                if (model.FotoUrl != null)
                {
                    FileModel objFile = new FileModel();
                    objFile.Ruta = $"{rutaBase}/{Path.GetFileName(model.FotoUrl)}";
                    var result = await Http.PostAsJsonAsync<FileModel>("Upload/EliminarRuta", objFile);

                }


                string filename = $"foto-{singleton.EmpresaId}-{DateTime.Now.Year}{DateTime.Now.Day}{DateTime.Now.Minute}{DateTime.Now.Second}{extension}";

                var content = new MultipartFormDataContent
{
                    { new ByteArrayContent(ms.GetBuffer()),rutaBase,filename}
                };

                var response = await http.PostAsync("Upload", content);
                string url = "..";
                if (response.IsSuccessStatusCode)
                {
                    var uploadFileName = await response.Content.ReadAsStringAsync();
                    if (uploadFileName != null)
                    {

                        imagePath = $"{url}/{uploadFileName}";
                        model.FotoUrl = imagePath;
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await GuardarLog("E", null, ex);
            await js.InvokeAsync<string>("MensajeAlerta", ex.Message);
            return;
        }
    }

    protected async Task GuardarLog(string tipo, string mensaje, Exception ex)
    {


        LogEvento log = new LogEvento();
        log.UsuarioId = singleton.UsuarioId;
        log.Fecha = DateTime.Now;
        log.Tipo = tipo;
        log.Campo1 = JsonConvert.SerializeObject(model);

        if (tipo == "E")
        {
            log.Mensaje = ex.Message;
            log.Seguimiento = ex.StackTrace;
            log.Fuente = ex.Source;
        }
        else
        {
            log.Mensaje = mensaje;
        }

        await Http.PostAsJsonAsync<LogEvento>($"LogEventos", log);
    }

}
